<%# TODO: Investigate: This should not be needed. Actually
Rails should automatically render the correct fields if
f.fields_for :re_subtasks are given
because of nested attributes. It might be because
the nested attributes for ReArtifactProperties to ReTask are
polymorphic 
TODO 2: fields_for uses the following implementation to check for nested_attributes
def nested_attributes_association?(association_name)
  @object.respond_to?("#{association_name}_attributes=")
end

and

f.to_model.object.respond_to?(:re_subtasks_attributes=)
is true in here.
%>


<%= f.fields_for :re_subtasks_attributes do |st_form| %>

  <% type_class = "subtask" %>
  <% type_class = "variant" if re_subtask.sub_type == 1 %>
  <% type_class = "problem" if re_subtask.sub_type == 2 %>
	

  <tr id="subtask_drag_<%= re_subtask.position %>" class="draggable <%= type_class %> subtask_row">

  <td style="cursor: pointer;" class="<%= type_class %>" ></td>
  <td class="<%= type_class -%>">
    <%= st_form.hidden_field :position, :index => nil, :class => "position"  %>
    <%= st_form.select :sub_type, [['ST', 0],['V', 1],['P', 2]], { :selected => re_subtask.sub_type }, { :index => nil, :class => "subtask-type" } %>
  </td>
  <td class="<%= type_class -%>">
    <%= st_form.text_area :name, { :size => "12x2", :index => nil, :value=> re_subtask.name, :class => "subtask_textarea" } %>
  </td>
  <td class="<%= type_class -%>">
  </td>
  <td class="<%= type_class -%>">
    <%= st_form.text_area :solution, :index => nil, :value=> re_subtask.solution, :size => "12x2", :class => "subtask_textarea" %>
  </td>
  <td class="<%= type_class -%>">
  </td>
  <td class="<%= type_class -%>">
    <% if re_subtask.new_record? %>
      <%= link_to_function t(:re_delete_subtask), "jQuery(this).parent().parent().remove()", :class => "icon icon-del" %> <br/>
    <% else %>
      <%= link_to_function t(:re_delete_subtask), "markSubtaskForDestroy(jQuery(this).parent())", :class => "icon icon-del" %> <br/>
      <%= st_form.hidden_field(:id, :value=> re_subtask.id, :index => nil) %>
      <%= st_form.hidden_field(:_destroy, :index => nil, :class => "should_destroy") %>
    <% end %>
    <%= link_to_function( t(:re_insert_st_after), "addSubtask(jQuery(this).parent().parent(), 'after')", :class => "icon icon-subtask-after" ) %>
  </td>
  </tr>
<% end %>
