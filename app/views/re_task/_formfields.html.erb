<% content_for :header_tags do %>
	<%= javascript_include_tag 'jquery.autogrowtextarea.js', :plugin => 'redmine_re' %>
<% end %>

<%= f.fields_for :artifact do |artifact_form|%>

  <fieldset class="tabular">
  	 <legend><%= l(:re_task_specific_attributes) %></legend>
		 <p><%= artifact_form.label :start, l(:re_task_start) %> <%= artifact_form.text_field :start, :class => "full_width" %></p>
		 
		 <p><%= artifact_form.label :end, l(:re_task_end) %> <%= artifact_form.text_field :end, :class => "full_width" %></p>
		 
		 <p><%= artifact_form.label :frequency, l(:re_task_frequency) %> <%= artifact_form.text_field :frequency, :class => "full_width" %></p>

		<p>
	     <label><%= l(:re_task_difficulties) %></label>
	 		
		   <%= artifact_form.text_area :difficult,
		                    :cols => 60,
			                    :rows => (@re_artifact_properties.artifact.difficult.blank? ? 10 : [[10, @re_artifact_properties.artifact.difficult.length / 50].max, 100].min),
			                    :class => 'wiki-edit' %>
			   <%= wikitoolbar_for  're_artifact_properties_artifact_attributes_difficult' %>
			   
		 
		 </p>
    </fieldset>  
  
	<fieldset class="tabular">
	   <legend><%= t(:re_subtasks) %></legend>
	   <table class="subtasks ui-sortable">
	      <thead>
	         <tr>
	            <th>&nbsp;</th>
	            <th><%= t(:re_subtask_type) -%></th>
	            <th><%= t(:re_subtask_name) -%></th>
	            <th>&nbsp;</th>
	            <th><%= t(:re_subtask_solution) -%></th>
	            <th>&nbsp;</th>
	            <th><a class="icon icon-subtask-after" href="#" onclick="addSubtask(document.getElementById('subtasks'), 'top'); return false;"><%= t(:re_insert_st_after) %></a></th>
	         </tr>
	      </thead>
	      <tbody id="subtasks">
		  <%= artifact_form.fields_for :re_subtasks do |builder| %>
		  	<%= render('re_task/subtasks', :f => builder) %>
		  <% end %>
	      </tbody>
	   </table>
	</fieldset>
	
	
	<%= javascript_tag do %>
	
		// TODO: Move to JS-File
		updateSubtaskPositionFields();
		
		// TODO: Move to JS-File
		function jsInitScript() {
		    jQuery(".subtasks tbody").sortable({
		      placeholder: 'ui-state-highlight',
		      start: function(event, ui){
		         jQuery(".ui-state-highlight").html("<td colspan='7' style='background:#4466AA'></td>");
		      },
		      update: function(event, ui){
		         updateSubtaskPositionFields();
		      },  
		    });

			jQuery("td.subtask-type select").change(function() {
				changeSubtaskRowColor(jQuery(this).parent().parent(), this.value);
			});
			
	    };
		
		// TODO: Move to JS-File
		jQuery(document).ready(function(){
		    jsInitScript();
				/* jQuery(".subtask_textarea").autoGrow();*/
		});
		
	  function changeSubtaskRowColor(element, value) {
	    jQuery(element).removeClass('subtask');
	    jQuery(element).removeClass('variant');
	    jQuery(element).removeClass('problem');
	
	    switch(value) {
	      case '0': jQuery(element).addClass('subtask'); break;
	      case '1': jQuery(element).addClass('variant'); break;
	      case '2': jQuery(element).addClass('problem'); break;
	      default: alert('<%= t(:re_st_type_not_allowed) %>' + value);
	    }
	
	    element.childElements().each( function ( td ) {
	       changeSubtaskRowColor(td, value)
	    });
	  }
	
	  function addSubtask(element, add_pos, type) {
	    var rendered_subtask;
	    rendered_subtask = "<%= get_escaped_subtask_html(artifact_form, 0) %>";
	    
	    switch(type) {
	      case '1':
	      	rendered_subtask = "<%= get_escaped_subtask_html(artifact_form, 1) %>";
	      break;
	      case '2':
	      	rendered_subtask = "<%= get_escaped_subtask_html(artifact_form, 2) %>";
	    }
	
	  	var now = new Date;
		var utc_timestamp = Date.UTC(now.getFullYear(),now.getMonth(), now.getDate() , 
	  						now.getHours(), now.getMinutes(), now.getSeconds(), 
	  						now.getMilliseconds());
	  	var ts = Math.round((new Date()).getTime() / 1000);

	  	rendered_subtask = replaceAll(rendered_subtask, "new_re_subtask", utc_timestamp.toString().substring(5,12));
	
	    switch(add_pos) {
	      case 'top':    jQuery(element).prepend(rendered_subtask); break;
	      case 'after':  jQuery(element).after(rendered_subtask); break;
	      case 'before': jQuery(element).before(rendered_subtask); break;
	      case 'bottom': jQuery(element).append(rendered_subtask); break;
	      default: alert('<%= t(:re_st_position_not_allowed) %> ' + add_pos);
	    }
	    
	    updateSubtaskPositionFields();
		jsInitScript();
	  }
	
	  //TODO: Update selectors! AND Move to JS-File
	  function updateSubtaskPositionFields() {
	    var pos = 1;
	    jQuery('#subtasks').children().each( function(child) {
	      jQuery(this).attr('id','subtask_drag_' + pos);
	      jQuery(this).children().next().children('.position').attr('value', pos);
	      pos++;
	    });
	  }
	  
	  // TODO: Move to JS-File
	  function add_fields(where, type, content ) {
	  	var now = new Date;
		var utc_timestamp = Date.UTC(now.getFullYear(),now.getMonth(), now.getDate() , 
	  						now.getHours(), now.getMinutes(), now.getSeconds(), 
	  						now.getMilliseconds());
	  	var ts = Math.round((new Date()).getTime() / 1000);
	  	 switch(type) {
	  	    case 're_subtask':
	  	    	content = replaceAll(content, "new_re_subtask", utc_timestamp.toString().substring(5,12));
	  	    	addSubtask(where, content);
	  	    break;
	  	 }
	  }
  
	  // TODO: Move to JS-File
	  function remove_fields(link) {
		jQuery(link).prev("input[type=hidden]").val("1");
		jQuery(link).closest(".nested_field").hide();
	  }

  
	  function replaceAll(txt, replace, with_this) {
	  	return txt.replace(new RegExp(replace, 'g'),with_this);
	  }
	<%end%>
<% end%>
