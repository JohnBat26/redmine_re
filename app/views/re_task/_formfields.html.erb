<div class="box">
	
  <fieldset>
  	 <legend><%= l(:re_task_specific_attributes) %></legend>
	 <p><%= f.label :start, l(:re_task_start) %> <%= f.text_field :start, :size => 100 %></p>
	 
	 <p><%= f.label :end, l(:re_task_end) %> <%= f.text_field :end, :size => 100 %></p>
	 
	 <p><%= f.label :frequency, l(:re_task_frequency) %> <%= f.text_field :frequency, :size => 100 %></p>
  </fieldset>
  
  <fieldset>
     <legend><%= l(:re_task_difficulties) %></legend>
     <% unless @artifact.id.nil? %>
	    <div class="contextual">
	       <a href="#" class="icon icon-edit" onclick="showAndScrollTo('update-difficult', 'artifact_difficult'); return false;"><%= l(:re_update_difficult) %></a>
	    </div>
	    <%= textilizable(@artifact, :difficult, :only_path => false) %>
	    <br />
	 <% end %>
	 
	 <div id='update-difficult' <%= 'style="display:none;"' unless @artifact.id.nil? %>>
	   <%= f.text_area :difficult,
	                    :cols => 60,
	                    :rows => (@artifact.difficult.blank? ? 10 : [[10, @artifact.difficult.length / 50].max, 100].min),
	                    :class => 'wiki-edit' %>
	   <%= wikitoolbar_for  'artifact_difficult' %>
	 </div>
  </fieldset>
</div>

<fieldset>
   <legend><%= l(:re_subtasks) %></legend>
   <table class="subtasks">
      <thead>
         <tr>
            <th>&nbsp;</th>
            <th>Type</th>
            <th>Name</th>
            <th>&nbsp;</th>
            <th>Solution</th>
            <th>&nbsp;</th>
            <th><%= link_to_function( t(:re_insert_st_after), "addSubtask('subtasks', 'top')", :class => "icon icon-subtask-after" ) %></th>
         </tr>
      </thead>
      <tbody id="subtasks">
		<% f.fields_for :re_subtasks do |builder| %>
			<%= render :partial => 're_subtask', :f => builder %>
		<% end %>
      </tbody>
   </table>
</fieldset>

<%= sortable_element( "subtasks",
  :tag => 'tr',
  :complete => visual_effect(:highlight, 'subtasks'),
  :onUpdate => "function() { updateSubtaskPositionFields(); }"
) %>

<%= javascript_tag do %>
  /* making textareas automatically resizeable */
  setResizeableTextAreas();

  function changeSubtaskRowColor(element, value) {
    element.removeClassName('subtask');
    element.removeClassName('variant');
    element.removeClassName('problem');

    switch(value) {
      case '0': element.addClassName('subtask'); break;
      case '1': element.addClassName('variant'); break;
      case '2': element.addClassName('problem'); break;
      default: alert('<%= t(:re_st_type_not_allowed) %>' + value);
    }

    element.childElements().each( function ( td ) {
       changeSubtaskRowColor(td, value)
    });
  }

  function addSubtask(element, add_pos) {
    var rendered_subtask;
    rendered_subtask = "<%= escape_javascript(render(:partial => "re_subtask", :object => ReSubtask.new)) %>";

    switch(add_pos) {
      case 'after':  $(element).insert( { after: rendered_subtask} ); break;
      case 'before': $(element).insert( { before: rendered_subtask} ); break;
      case 'bottom': $(element).insert( { bottom: rendered_subtask} ); break;
      case 'top':    $(element).insert( { top: rendered_subtask} ); break;
      default: alert('<%= t(:re_st_position_not_allowed) %> ' + add_pos);
    }

    unregisterTextAreaEvents();
    setResizeableTextAreas();
    Sortable.create("subtasks", {onUpdate:function() { updateSubtaskPositionFields(); }, tag:'tr'})
    updateSubtaskPositionFields();
  }

  function markSubtaskForDestroy(element) {
    $(element).next('.should_destroy').value = 1;
    $(element).up('.subtask_row').hide();
  }

  function updateSubtaskPositionFields() {
    var pos = 1;
    $('subtasks').childElements().each( function(child) {
      $(child).id = 'subtask_drag_' + pos;
      $(child).down('.position').value = pos;
      pos++;
    });
  }

  function setResizeableTextAreas() {
      $$('textarea.subtask_textarea').each(function (el) {
         new ResizingTextArea($(el));
      });
  }

  function unregisterTextAreaEvents() {
    $$('textarea.subtask_textarea').each(function (el) {
     (el).stopObserving('click');
     (el).stopObserving('keyup');
    });
  }
<% end %>
