<% content_for :header_tags do %>
	<%= javascript_include_tag 'jquery.autogrowtextarea.js', :plugin => 'redmine_re' %>
<% end %>

<%= f.fields_for :artifact do |artifact_form|%>

  <fieldset>
  	 <legend><%= l(:re_task_specific_attributes) %></legend>
  	 <div class="splitcontentleft" style="border-right: 1px dotted #cccccc;">
		 <p><%= artifact_form.label :start, l(:re_task_start) %> <%= artifact_form.text_field :start %></p>
		 
		 <p><%= artifact_form.label :end, l(:re_task_end) %> <%= artifact_form.text_field :end %></p>
		 
		 <p><%= artifact_form.label :frequency, l(:re_task_frequency) %> <%= artifact_form.text_field :frequency %></p>
     </div>
     <div class="splitcontentright">
		  <fieldset>
		     <legend><%= l(:re_task_difficulties) %></legend>
		     <% unless @re_artifact_properties.artifact.id.nil? %>
			    <div class="contextual">
			       <a href="#" class="icon icon-edit" onclick="showAndScrollTo('update-difficult', 'artifact_difficult'); return false;"><%= l(:re_update_difficult) %></a>
			    </div>
			    <%= textilizable(@re_artifact_properties.artifact, :difficult, :only_path => false) %>
			    <br />
			 <% end %>
			 
			 <div id='update-difficult' <%= 'style="display:none;"'.html_safe unless @re_artifact_properties.artifact.new_record? %>>
			   <%= artifact_form.text_area :difficult,
			                    :cols => 60,
			                    :rows => (@re_artifact_properties.artifact.difficult.blank? ? 10 : [[10, @re_artifact_properties.artifact.difficult.length / 50].max, 100].min),
			                    :class => 'wiki-edit' %>
			   <%= wikitoolbar_for  'artifact_difficult' %>
			 </div>
		  </fieldset>
	   </div>
  </fieldset>
	<fieldset>
	   <legend><%= l(:re_subtasks) %></legend>
	   <table class="subtasks">
	      <thead>
	         <tr>
	            <th>&nbsp;</th>
	            <th>Type</th>
	            <th>Name</th>
	            <th>&nbsp;</th>
	            <th>Solution</th>
	            <th>&nbsp;</th>
	            <th><%= link_to_function( t(:re_insert_st_after), "addSubtask(document.getElementById('subtasks'), 'top')", :class => "icon icon-subtask-after" ) %></th>
	         </tr>
	      </thead>
	      <tbody id="subtasks">
          <% @re_artifact_properties.artifact.re_subtasks.each do |current_re_subtask| %>
             <%= render(:partial => 're_subtask/formfields', :locals => { :f => artifact_form, :re_subtask => current_re_subtask }) %>
          <% end %>
	      </tbody>
	   </table>
	</fieldset>

	<%#= sortable_element( "subtasks",
	  :tag => 'tr',
	  :complete => visual_effect(:highlight, 'subtasks'),
	  :onUpdate => "function() { updateSubtaskPositionFields(); }"
	) %>
	
	
	<%= javascript_tag do %>

		$j("select.subtask-type").change(function() {
			changeSubtaskRowColor(jQuery(this).parent().parent(), this.value);
		});
		
	  function changeSubtaskRowColor(element, value) {
	    jQuery(element).removeClass('subtask');
	    jQuery(element).removeClass('variant');
	    jQuery(element).removeClass('problem');
	
	    switch(value) {
	      case '0': jQuery(element).addClass('subtask'); break;
	      case '1': jQuery(element).addClass('variant'); break;
	      case '2': jQuery(element).addClass('problem'); break;
	      default: alert('<%= t(:re_st_type_not_allowed) %>' + value);
	    }
	
	    element.childElements().each( function ( td ) {
	       changeSubtaskRowColor(td, value)
	    });
	  }
	
	  function addSubtask(element, add_pos) {
	    var rendered_subtask;
	    rendered_subtask = "<%= escape_javascript(render(:partial => 're_subtask/formfields', :locals => { :f => artifact_form, :re_subtask =>ReSubtask.new } )) %>";
	
	    switch(add_pos) {
	      case 'top':
	      case 'after':  jQuery(element).after(rendered_subtask); break;
	      case 'before': jQuery(element).before(rendered_subtask); break;
	      case 'bottom': jQuery(element).append(rendered_subtask); break;
	      default: alert('<%= t(:re_st_position_not_allowed) %> ' + add_pos);
	    }
	    
	    Sortable.create("subtasks", {onUpdate:function() { updateSubtaskPositionFields(); }, tag:'tr'})
	    updateSubtaskPositionFields();

			/* TODO: register changeSubtaskRowColor
	  }
	
	  function markSubtaskForDestroy(element) {
	  	element.children('.should_destroy').val(1);
	    element.parent().hide();
	  }
	
	  function updateSubtaskPositionFields() {
	    var pos = 1;
	    $('subtasks').childElements().each( function(child) {
	      $(child).id = 'subtask_drag_' + pos;
	      $(child).down('.position').value = pos;
	      pos++;
	    });
	  }
	  
	<%end%>
<% end%>
