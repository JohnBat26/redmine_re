<% content_for :header_tags do %>
    <%= javascript_include_tag 'jit.js', :plugin => 'redmine_re' %>
<% end%>

<!-- KoREM: We have to check if this is needed and to add the js-File.-->
<!--[if IE]><script language="javascript" type="text/javascript" src="../../Extras/excanvas.js"></script><![endif]-->

<div id='detail_view' class='detail_view'>
<h2><%= l(:re_relationship_visualization)%></h2>

  <div id="visualization_filters">
      <%= form_remote_tag  :url => {:action => :build_json_according_to_user_choice,
                                   :project_id => params[:project_id]},
                          :complete => "init(request.responseJSON, request.request.parameters.visualization_type);" do %>
    <table>
      <tr>
        <td colspan="3">
          <h4><%= l(:re_artifacts) %></h4>
        </td>
      </tr>
      <% @re_artifact_order.each_with_index do |artifact_type, i| %>
        <% if ReSetting.get_serialized(artifact_type, @project.id)['in_use'] %>
        <tr>
        <% colors = "#" + ReSetting.get_serialized(artifact_type, @project.id)['color'] %>
        <td>
            <%= rendered_artifact_type(artifact_type.underscore) %>
          </td>
          <td>
            <span style="padding-left: 20px; alpha=0.2; background-color:<%= colors %>; color:<%= colors %>;">&nbsp;</span>
          </td>
          <td>
            <%= check_box_tag 'artifact_filter[]', artifact_type.to_s, true %>
          </td>
        </tr>
        <% end %>
      <% end %>
      <tr>
        <td colspan="3">
          <h4><%= l(:re_artifact_relationships) %></h4>
        </td>
      </tr>
      <% for key, value in ReArtifactRelationship::RELATION_TYPES do %>
      <tr>
        <% colors = "#" + ReSetting.get_serialized(value, @project.id)['color'] %>
        <td>
          <%= rendered_relation_type(value) %>
        </td>
        <td>
          <span style="padding-left: 20px; background-color:<%= colors %>; color:<%= colors %>;">&nbsp;</span>
        </td>
        <td>
          <%= check_box_tag 'relation_filter[]', key.to_s, true %>
        </td>
      </tr>
      <% end %>
      <tr>
      <td colspan="3">
        <h4><%= l(:re_visualization_type) %></h4>
      </td>
      </tr>
      <tr>
        <td colspan="2">
          <%= t('re_sunburst') %>
        </td>
        <td>
          <%= radio_button_tag 'visualization_type', 'sunburst' %>
        </td>
      </tr>
      <tr>
        <td colspan="2">
          <%= t('re_netmap')%>
        </td>
        <td>
          <%= radio_button_tag 'visualization_type', 'netmap' %>
        </td>
      </tr>
      <tr>
        <td colspan="3"><%= submit_tag l(:re_show), :onClick => "clear_canvas()"%></td>
      </tr>
      
    </table>
    <% end %>
    <p>
     <h4><%= t(:re_artifact_details) %></h4>
     <div id="node-details"></div>
    </p>
  </div>

  <% canvas_size = ReSetting.get_plain("visualization_size", @project.id) %>
  <div id="infovis" style="<%="width: #{canvas_size}px; height: #{canvas_size}px" %>" ></div>

</div>

<script type="text/javascript">
  //<![CDATA[

var visualization = null;
var form = null;

function clear_canvas() {
  $jit.id('infovis').innerHTML = '';
};

function init(data, visualization_type) {
  
  switch(visualization_type) {
  case "sunburst":
    visualization = new $jit.Sunburst({
      //id container for the visualization
      injectInto: 'infovis',
      //Change node and edge styles such as
      //color, width, lineWidth and edge types
      Node: {
        overridable: true,
        type: 'multipie',
        height: 90
      },
      Edge: {
        overridable: true,
        type: 'line',
        alpha: 1
      },      
      //Draw canvas text. Can also be
      //'HTML' or 'SVG' to draw DOM labels
      Label: {
        type: 'Native',
        color: '#000000'
      },
      Tips: {
        enable: true,
        onShow: function(tip, node, elem) {
          var data = node.data;
          var html = "<b>" + data.full_name + "</b>"; 
          if(data.description) {
            html += "<br />" + data.description.replace("\n", "<br />");
          }
          if(data.user) {
            html += "<br /><b>Last modified:</b> " + data.updated_at + " by " + data.user;
          }    
          if(data.responsibles) {
            html += "<br /><b>Responsible user:</b> " + data.responsibles;
          }    
          tip.innerHTML = html;
        }    
      },
      Events: {
        enable: true,
        type: 'Native',
        //List node connections onClick
        onClick: function(node, eventInfo, e) {
          if (!node) return;
          var data = node.data
          var id = node.id.gsub('node_','');
          var link = "<%= url_for(:controller => 're_artifact_properties', :action => 'edit') %>/";        
          var html = "<b>Name: <a href=" + link + id + ">" + data.full_name + "</a></b>"
          if (data.description) {
            html += "<br/><br/><b><%= t(:re_artifact_description) %></b><br/>"
            html += data.description.replace("\n", "<br />")
          }
          html += "<br/><br/><b><%= t(:re_connected_nodes) %></b><br/>"
          html += "<ul class=\"filterdetails\"><li>", ans = [];
    
          var relationships = data.relationship_data;
          for (i=0; i<relationships.size(); i++) {
            ans.push(relationships[i].direction +  " <a href=" + link + relationships[i].id + ">" + relationships[i].full_name + "</a> as " + relationships[i].relation_type);
          }
          $jit.id('node-details').innerHTML = html + ans.join("</li><li>") + "</li></ul>";
        },
        onRightClick: function(node) {
          if(node.collapsed) {
            visualization.op.expand(node, {
              'type': 'animate',
              'duration': 700,
              'transition': $jit.Trans.Back.easeOut
            });
          } else {
            visualization.op.contract(node, {
              'type': 'animate',
              'duration': 700,
              'transition': $jit.Trans.Quart.easeInOut
            });
          }
        }      
      },
      levelDistance: '90'
    });
    visualization.loadJSON(data);
    visualization.refresh();
    break;
    
  case "netmap":
    visualization = new $jit.Sunburst({
      //id container for the visualization
      injectInto: 'infovis',
      //Change node and edge styles such as
      //color, width, lineWidth and edge types
      Node: {
        overridable: true,
        type: 'multipie',
        height: 90
      },
      Edge: {
        overridable: true,
        type: 'line',
        alpha: 1
      },      
      //Draw canvas text. Can also be
      //'HTML' or 'SVG' to draw DOM labels
      Label: {
        type: 'Native',
        color: '#000000'
      },
      Tips: {
        enable: true,
        onShow: function(tip, node, elem) {
          var data = node.data;
          var html = "<b>" + data.full_name + "</b>"; 
          if(data.description) {
            html += "<br />" + data.description.replace("\n", "<br />");
          }
          if(data.user) {
            html += "<br /><b>Last modified:</b> " + data.updated_at + " by " + data.user;
          }    
          if(data.responsibles) {
            html += "<br /><b>Responsible user:</b> " + data.responsibles;
          }    
          tip.innerHTML = html;
        }    
      },
      Events: {
        enable: true,
        type: 'Native',
        //List node connections onClick
        onClick: function(node, eventInfo, e) {
          if (!node) return;
          var data = node.data
          var id = node.id.gsub('node_','');
          var link = "<%= url_for(:controller => 're_artifact_properties', :action => 'edit') %>/";        
          var html = "<b>Name: <a href=" + link + id + ">" + data.full_name + "</a></b>"
          if (data.description) {
            html += "<br/><br/><b><%= t(:re_artifact_description) %></b><br/>"
            html += data.description.replace("\n", "<br />")
          }
          html += "<br/><br/><b><%= t(:re_connected_nodes) %></b><br/>"
          html += "<ul class=\"filterdetails\"><li>", ans = [];
    
          var relationships = data.relationship_data;
          for (i=0; i<relationships.size(); i++) {
            ans.push(relationships[i].direction +  " <a href=" + link + relationships[i].id + ">" + relationships[i].full_name + "</a> as " + relationships[i].relation_type);
          }
          $jit.id('node-details').innerHTML = html + ans.join("</li><li>") + "</li></ul>";
        },
        onRightClick: function(node) {
          if(node.collapsed) {
            visualization.op.expand(node, {
              'type': 'animate',
              'duration': 700,
              'transition': $jit.Trans.Back.easeOut
            });
          } else {
            visualization.op.contract(node, {
              'type': 'animate',
              'duration': 700,
              'transition': $jit.Trans.Quart.easeInOut
            });
          }
        }      
      },
      levelDistance: '<%= canvas_size.to_i / 2 - 90 %>'
    });
    visualization.loadJSON(data);
    visualization.refresh();
    break;
  
  default :
  alert ("<%= t(:re_please_select_visualization_type) %>");
    break;
  }
};
  //]]>
</script>

