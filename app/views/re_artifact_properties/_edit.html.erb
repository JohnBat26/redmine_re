  <div class="panes">
  <div class="box">
      <%= form_for @re_artifact_properties do |f| %>
      <%= hidden_field_tag(:id, @re_artifact_properties.id) %>

      <%= render 'common_attributes', { :f => f } %>
      <br/>

      <fieldset class="tabular">
        <legend><%= t(:re_associated_issues) %></legend>
				<div class="splitcontent">
	        <div class="splitcontentleft">
		       <div id="issue_filter">
		          <div class="inputs">
		  					 <%= select_tag 'source[name]', "<option></option>".html_safe, :id => 'issue_filter_input', :class => 'direct_artifacts' %>
		             <%= text_field_tag 'source[name]', nil, :id => 'issue_filter_input_nojs' %>
		          </div>
		       </div>
					  <p>
	            <%= link_to image_tag('add.png')+' create related Issue', :controller=> 'issues', :action=>'new', :project_id => @project.identifier,
	              :artifacttype => @re_artifact_properties.artifact_type, :artifactname => @re_artifact_properties.name, :artifactid => @re_artifact_properties.id unless @re_artifact_properties.id.blank?%>
						</p>
        </div>

	      <div class='splitcontentright'>
	          <% unless @issues.nil? %>
	              <% @issues.each do |issue| %>
	                  <div id="issue_list_issue_<%= issue.id %>">
	                  	<input id="issue_id" type="hidden" name="issue_id[]" value="<%= issue.id %>" />
	                  	<%= (link_to issue.subject, issue_path(issue))+'&nbsp;'.to_s.html_safe %>
	                    <a href="#" onclick="Javascript: jQuery('#issue_list_issue_<%= issue.id %>').remove()"><%= image_tag('delete.png') %></a>
	                  </div>
	              <% end %>
	          <% end %>
	      </div>
			</div>
      </fieldset>

    <!-- Additional fields like subtasks for task which are described in an own partial -->
    <%= render( @artifact_type.underscore+"/formfields", {:f => f} ) if File.exists?("#{Rails.root}/plugins/redmine_re/app/views/"+@artifact_type.underscore+"/_formfields.html.erb") %>
    <!-- add building blocks if user obtains the rights needed for that -->
    <div id='re_bb_section'>
      <%= render :partial => "re_building_block/bb_section", :locals => {:bb_hash => @bb_hash, :bb_error_hash => @bb_error_hash} %>
    </div>
      <%# add_bb_configuration_link(params[:controller].camelcase)%>


            <div class="rating_comments">
                <fieldset class="comment">
                    <legend> <%= t(:comments) %></legend>

                    <textarea class="comment_input" name="comment" cols="20" rows="3"></textarea>

                    <%
                    if ( User.current.preference[:others].nil? or User.current.preference[:others][:comments_sorting]  == "asc" )
                      @re_artifact_properties.comments.each do |comment|
                    %>
                       <hr />
                       <p>
                          <% if User.current.allowed_to?(:administrate_requirements, @project) %>
                            [<%= link_to 'X', :controller => "re_artifact_properties", :action => 'edit', :deletecomment_id => comment.id, :id => @re_artifact_properties.id %>]
                          <% end %>

                          <b><%= comment.created_on.to_datetime.to_s[0,10] %>
                          <%= comment.created_on.to_datetime.to_s[-14,8] %> -
                          <%= User.find(comment.author_id).to_s %></b><br />
                          <%= comment.comments %></p>
                    <% end %>
                    <%
                    elsif
                      @re_artifact_properties.comments.reverse.each do |comment|
                    %>
                       <hr />
                       <p>
                          <% if User.current.allowed_to?(:administrate_requirements, @project) %>
                            [<%= link_to 'X', :controller => "re_artifact_properties", :action => 'edit', :deletecomment_id => comment.id, :id => @re_artifact_properties.id %>]
                          <% end %>

                          <b><%= comment.created_on.to_datetime.to_s[0,10] %>
                          <%= comment.created_on.to_datetime.to_s[-14,8] %> -
                          <%= User.find(comment.author_id).to_s %></b><br />
                          <%= comment.comments %></p>
                    <% end %>
                    <% end %>
                </fieldset>
            </div>

   <fieldset>
   	<legend><%= t(:re_artifact_relationships)%></legend>

    <div class="splitcontentleft">
      <div id="relationship_link_list">
        <% @relationships_outgoing = ReArtifactRelationship.find_all_by_source_id(@re_artifact_properties.id) %>
        <% @relationships_outgoing.delete_if { |rel| rel.relation_type.eql?(ReArtifactRelationship::RELATION_TYPES[:pch]) } %>

        <% @relationships_incoming = ReArtifactRelationship.find_all_by_sink_id(@re_artifact_properties.id) %>
        <% @relationships_incoming.delete_if { |rel| rel.relation_type.eql?(ReArtifactRelationship::RELATION_TYPES[:pch]) } %>

        <%= render "re_artifact_relationship/relationship_links" %>
      </div>
      <br/>
    </div>

    <div class="splitcontentright">
		<%= javascript_tag do %>
		
		    (function($) {
		        $().ready(function() {
	            // hidden on init because of UJS
	            $('#issue_filter_input_nojs').remove();
	            $('#issue_filter .inputs').show();
		
	            $('#issue_filter_input').suggestible({
	                ajax: {
	                    suggestions: {
	                        url: '<%= suggest_issues_re_queries_path(@project.id) %>',
	                        dataType: 'json',
	                        data: function(value, helpers) {
	                            return { query: value };
	                        },
	                        loading: function(helpers) {
	                            $('#ajax-indicator').show();
	                            helpers.elements.textBox.attr('disabled', 'disabled');
	                        },
	                        loaded: function(helpers) {
	                            $('#ajax-indicator').hide();
	                            helpers.elements.textBox.removeAttr('disabled');
	                        }
	                    }
	                },
	                layout: {
	                    containers: function(selectBox, options) {
	                        return new SuggestBoxContainers(selectBox, options);
	                    },
	                    items: function(helpers) {
	                        return new IssuesSuggestBoxItems(helpers);
	                    }
	                }
	            });
		
	            //var issue_elements = $('#issue_filter_input_container').data('elements');
	            //issue_elements.textBox.attr('name', issue_elements.inputName);


		            // hidden on init because of UJS
		            $('#relation_filter_input_nojs').remove();
		            $('#relation_filter .inputs').show();
		
		            $('#relation_filter_input').suggestible({
		                ajax: {
		                    suggestions: {
		                        url: '<%= suggest_artifacts_re_queries_path(@project.id) %>',
		                        dataType: 'json',
		                        data: function(value, helpers) {
		                            return { query: value };
		                        },
		                        loading: function(helpers) {
		                            $('#ajax-indicator').show();
		                            helpers.elements.textBox.attr('disabled', 'disabled');
		                        },
		                        loaded: function(helpers) {
		                            $('#ajax-indicator').hide();
		                            helpers.elements.textBox.removeAttr('disabled');
		                        }
		                    }
		                },
		                layout: {
		                    containers: function(selectBox, options) {
		                        return new SuggestBoxContainers(selectBox, options);
		                    },
		                    items: function(helpers) {
		                        return new DirectArtifactsSuggestBoxItemsForRelations(helpers);
		                    }
		                }
		            });
		
		            var elements = $('#relation_filter_input_container').data('elements');
		            elements.textBox.attr('name', elements.inputName);
		        });
		    })(jQuery);
		
		<% end %>   	
	   	
        <b><%= t(:re_create_new_relation) %></b>
	   	<div id="relationhandling">
		   	
	           <% for relation_type in @re_relation_order %>
	               <% if ReSetting.get_serialized(relation_type, @project.id)['in_use'] && relation_type != 'parentchild' %>
	                   <%= radio_button :re_artifact_relationship, :relation_type, relation_type %><%= rendered_relation_type(relation_type) %>
	                   <br/>
	               <% end %>
	           <% end %>
		       <%= hidden_field_tag 'source[name_mode]', 'contains' %>
		       <div id="relation_filter">
		          <div class="inputs">
		             <%= select_tag 'source[name]', "<option></option>".html_safe, :id => 'relation_filter_input', :class => 'direct_artifacts' %>
		             <%= text_field_tag 'source[name]', nil, :id => 'relation_filter_input_nojs' %>
		          </div>
		       </div>
	     </div>
	  </div>
   </fieldset>


    <p>
    <%= submit_tag t(:re_save) %>
        &nbsp;
    <%= link_to(t(:re_cancel), { :project_id => @project.id }, { :class => "icon icon-reload" }) %>
    </p>

  <% end %><!-- form end tag -->

    <div id="watchers">
      <%= render :partial => 'watchers/watchers', :locals => {:watched => @re_artifact_properties} %>
    </div>
