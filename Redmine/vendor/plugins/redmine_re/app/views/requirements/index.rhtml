<%= stylesheet_link_tag 'redmine_re.css', :plugin => "redmine_re", :media => 'all' %>
<%= stylesheet_link_tag 'tafelTree.css', :plugin => "redmine_re", :media => 'all' %>
<%= javascript_include_tag 'tafelTree/Tree.js', :plugin => 'redmine_re' %>
<%= javascript_include_tag :defaults %>


<div id='treebar' class='treebar' style='display:none;'>
    <h3><%= l(:re_treeview) %></h3>
    <div id='tree'></div>
</div>

<h3><%= l(:re_requirements_overview) %></h3>

<p id='showtree'><%= link_to_remote( 'Show Tree',
    :url => {:action => :treeview, :method => 'post', :project_id => @project.id},
    :success => "showTreeBar(request.responseText)",
    :failure => "TODO()"
    ) %></p>
<p id='hidetree' style='display:none;'><%= link_to_function('Hide Tree', "Element.hide('treebar'); Element.hide('hidetree'); Element.show('showtree')") %></p>


<%# content_for :header_tags do %>
  <%#= stylesheet_link_tag "example.css", :plugin => "meetings", :media => "screen" %>
<%# end %>
<table>
    <thead>
        <tr>
          <% for column in ReArtifact.content_columns %>
                <td><b><%= l('re_column_' + column.name) %></b></td>
              <% end %>
          <td><b><%= l(:re_column_edit) %></b></td>
          <td><b><%= l(:re_column_delete) %></b></td>
          <td><b><%= l(:re_column_tree) %></b></td>
        </tr>
    </thead>
    <tbody>
        <% for artifact in @artifacts do %>
            <tr>
              <% for column in ReArtifact.content_columns %>
                <td><%= artifact.send(column.name) %></td>
              <% end %>
              <% controller_name = artifact.artifact ? artifact.artifact_type.to_s.underscore : ''%>
              <% association_id = artifact.artifact ? artifact.artifact_id : artifact.id %>
              <td><%= link_to l(:re_edit) , :controller => controller_name, :action => 'edit', :id => association_id, :project_id => @project.id %></td>
              <td><%= link_to l(:re_delete) , :controller => controller_name, :action => 'delete', :id => association_id, :project_id => @project.id %></td>
              <td><%= link_to l(:re_show_tree) , :controller => 'requirements', :action => 'treeview', :id => artifact.id, :project_id => @project.id %></td>

            </tr>
        <% end %>
    </tbody>
</table>

<%= link_to l(:re_show_goals), :controller => 're_goal', :action => 'index', :project_id => @project.id %> |
<%= link_to l(:re_show_tasks), :controller => 're_task', :action => 'index', :project_id => @project.id %> |
<%= link_to l(:re_show_subtasks), :controller => 're_subtask', :action => 'index', :project_id => @project.id %> |
<%= link_to l(:re_show_general_tree_view), :action => 'treeview', :method => 'post', :project_id => @project.id %>

<% content_for :sidebar do %>
    <%= render :partial => 'requirements/sidebar' %>
<% end %>

<script type="text/javascript">
    <%#= visual_effect :fade, 'hidetree', :duration =>0 %>
    // We declare the tree outside of the function. This way it's
    // accessible from any function
    var tree = null;


    function showTreeBar(treeData) {
        var data = null;
        data = new Object(treeData);
        tree = new TafelTree('tree', data, {
            'imgBase' : '<%= image_path('tafeltree', :plugin => 'redmine_re').split('?')[0] %>/',
            'width' : '100%', // default value : 100%
            'height' : 'auto', // default value : auto
            'openAtLoad' : true,
            'cookies' : false,
            'onDrop' : my_drop
        });
        <%= visual_effect :appear, 'treebar', :duration => 0 %>
        <%= visual_effect :fade, 'showtree', :duration => 0 %>
        <%= visual_effect :appear, 'hidetree', :duration => 0 %>
        tree.generate(); /* still won't work -> debugging in firebug says treeData seems ok...?? */
    };

    // This function is called automatically
    // when the page finishes to load
    // (and can be called manually on success of an ajax call
    // initTree();

    function my_drop (branch_move, branch_here, drop_finished, new_branch) {
        // Beware, the function is called twice. One time before drop
        // happens, one time after. Here, we check before drop
        // happens
        if (!drop_finished) {
            // Tests
            if (true) {
                // OK, the branch will be dropped here
                return true;
            } else {
                // Here, the branch won't be dropped and will return
                // at her place
                return false;
            }
        } else {
            /* ich bin mir ziemlich sicher, dass es für XMLHttpRequests auch Rails-Helper bzw. etwas von Prototype gibt ...
             * schau mal den generierten Code dieser Seite im Browser an. Der "ShowTree"-Helper generiert new Ajax.Request(...) */
            var request = new XMLHttpRequest();
            var url = '/requirements/delegate_tree_drop?new_parent_id=' + branch_here.getId() + ';moved_artifact_id=' + branch_move.getId();
            request.open('get', url, true);
            request.send(null)
        }
    };
</script>