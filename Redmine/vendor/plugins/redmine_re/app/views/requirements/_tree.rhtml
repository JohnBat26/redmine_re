<div id="tree"></div>

<script type="text/javascript">

    // We declare the tree outside of the function. This way it's
    // accessible from any function
    var tree = null;
    var treeData = <%= @jsontree.to_s %>;

    // Tree initialisation.
    var initTree = function TafelTreeInit() {
        tree = new TafelTree('tree', treeData, {
            'generate' : true,
            'imgBase' : '<%=image_path('tafeltree', :plugin => 'redmine_re').split('?')[0] %>/',
            'width' : '100%', // default value : 100%
            'height' : 'auto', // default value : auto
            'openAtLoad' : true,
            'cookies' : false,
            'onDrop' : tree_node_drop
        });
    }

    // This function is called automatically
    // when the page finishes to load
    // (and can be called manually on success of an ajax call
    initTree();

    function tree_node_double_click (branch) {
        var id = branch.getId();
        var controller = branch.getIcon();
        controller = controller.substr(0, controller.length - '.gif'.length);
        var url = '/' + controller + '/edit/'+ id + '?project_id=<%= @project.id -%>'; 

        //Usage of prototype Ajax request builder
        new Ajax.Updater('detail_view', url, {asynchronous:true, evalScripts:true, method:'get'});
        // Thorsten, den Helper kann ich nicht einsetzten, weil er nicht dynamisch ist -->
        // die URL ergibt sich ja erst aus dem OnClick, und darauf kann ich aus dem Ruby-
        // code ja zum Zeitpunkt der Auswertung noch nicht zugreifen...
        <%#= remote_function(:update => "detail_view", :url => { :action => url }) %>
        return false;
    };


    function tree_node_drop (branch_move, branch_here, drop_finished, new_branch) {
        // Beware, the function is called twice. One time before drop
        // happends, one time after. Here, we check before drop
        // happends
        if (!drop_finished) {
            // Tests
            if (true) {
                // OK, the branch will be dropped here
                return true;
            } else {
                // Here, the branch won't be dropped and will return
                // at her place
                return false;
            }
        } else {

            var url = '/requirements/delegate_tree_drop?new_parent_id=' + branch_here.getId() + ';moved_artifact_id=' + branch_move.getId();
            // Usage of prototype Ajax request builder
            new Ajax.Request(url, {method: 'get'})

        }
        return false; /*to present on_click from invoking */
    }

    function tree_node_click (branch, e) {
        var id = branch.getId();
        var url = '/requirements/context_menu/'+ id + '?project_id=<%= @project.id -%>';
        var mouse_x = Event.pointerX(e);
        var mouse_y = Event.pointerY(e);
        var render_x = mouse_x;
        var render_y = mouse_y;
        var dims;
        var menu_width;
        var menu_height;
        var window_width;
        var window_height;
        var max_width;
        var max_height;
        new Ajax.Updater('context-menu', url, {asynchronous:true, evalScripts:true, method:'get'});
        menu = document.getElementById('context-menu');
        dims = menu.getDimensions();
				 menu_width = dims.width;
				 menu_height = dims.height;
				 max_width = mouse_x + 2*menu_width;
				 max_height = mouse_y + menu_height;

				 var ws = window_size();
				 window_width = ws.width;
				 window_height = ws.height;

				 /* display the menu above and/or to the left of the click if needed */
				 if (max_width > window_width) {
				   render_x -= menu_width;
				   $('context-menu').addClassName('reverse-x');
				 } else {
					 $('context-menu').removeClassName('reverse-x');
				 }
				 if (max_height > window_height) {
				   render_y -= menu_height;
				   $('context-menu').addClassName('reverse-y');
				 } else {
					 $('context-menu').removeClassName('reverse-y');
				 }
				 if (render_x <= 0) render_x = 1;
				 if (render_y <= 0) render_y = 1;
				 $('context-menu').style['left'] = (render_x + 'px');
				 $('context-menu').style['top'] = (render_y + 'px');
                 //$('context-menu').style['left'] = ('400px');
				 //$('context-menu').style['top'] = ('400px');
                 Element.update('context-menu', '');

         Effect.Appear('context-menu', {duration: 0.20});
         if (window.parseStylesheets) { window.parseStylesheets(); } // IE
        //menu.style.display = 'block';
        
    }

    function window_size() {
        var w;
        var h;
        if (window.innerWidth) {
        w = window.innerWidth;
        h = window.innerHeight;
        } else if (document.documentElement) {
        w = document.documentElement.clientWidth;
        h = document.documentElement.clientHeight;
        } else {
        w = document.body.clientWidth;
        h = document.body.clientHeight;
        }
        return {width: w, height: h};
    }

</script>