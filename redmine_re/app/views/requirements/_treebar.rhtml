<div id='treebar' class='treebar'>
  <!--<a href="#" id="hide_treebar" class="contextual" title="<%= t(:re_shows_after_reload) %>"><%= t(:re_hide) %></a>-->
  
  <h2 class="current"><%= l(:re_tree_overview) %></h2>
  <div class="pane">
    <%= render :partial => 'requirements/filter' %>
    <div id="tree"></div>
  </div>
  
  <h2><%= l(:re_create_new_artifacts) %></h2>
  <div class="pane">
    <ul class="navigation">
    <% for artifact_type in @re_artifact_order	%>
      <% artifact_settings = ReSetting.get_serialized(artifact_type, @project.id) %>
      <% if artifact_settings['in_use'] %>
      <li><div class="bullet_add"></div><%= link_to artifact_settings['alias'] ? artifact_settings['alias'] : t(artifact_type.underscore), {
              :controller => artifact_type.underscore,
              :action => "new",
              :project_id => @project.id } ,
              :class => "icon #{artifact_type.underscore}" %></li>
      <% end %>
    <% end %>
      <% %>
    </ul>
  </div>
    
  <h2><%= l(:re_show_relationships) %></h2>
  <div class="pane">
    <ul class="navigation">
      <li><%= link_to l(:re_relationship_visualization), {
            :controller => "re_artifact_relationship",
            :action => "visualization",
            :project_id => @project.id } %>
      </li>
    </ul>
  </div>

  <% if User.current.allowed_to?(:administrate_requirements, @project) %>
  <h2><%= l(:re_configure) %></h2>
  <div class="pane">
    <ul class="navigation">
      <li><%= link_to l(:re_configure_plugin), {
        :controller => "re_settings",
        :action => "configure", 
        :project_id => @project.identifier } %>
      </li>
    </ul>
  </div>
  <% end %>
  
  <span id="back-top"><a href="#top"><%= l(:re_scroll_to_top) %></a></span>
</div>

<script type="text/javascript">
  //<![CDATA[
  
jQuery("#hide_treebar").click(function () {
  jQuery("#treebar").hide();
  jQuery(".detail_view").css('margin-left', '10px');
});

/* if a user clicks a tab, this variable becomes true.
   If it is true, the tab containing the tree does not
   get opened after the tree is loaded (since the
   user has already chosen another tab)
   (may be refactored as non-global variable) */
var cancel_showtree = false;

var accordion = jQuery("#treebar").tabs("#treebar div.pane", {
  tabs: 'h2',
  effect: 'slide',
  initialIndex: null,
  history:true,
	onClick: function(event, tabIndex) {
    cancel_showtree = true;
	}
});

var tree = jQuery("#tree")
  .bind("loaded.jstree", function (event, data) {
    if (! cancel_showtree) {
      var api = jQuery("#treebar").data("tabs");
      api.click(0);
      cancel_showtree = false;
    }
  })
  .bind("close_node.jstree", function (event, data) {
    jQuery.ajax({
      "url" : "<%= url_for :controller => 'requirements', :action => 'treestate' %>/" + data.args[0].attr("id").gsub('node_','') ,
    });        
  })
  .bind("open_node.jstree", function (event, data) {
    var node = data.args[0];
    var node_postition = node.position();
    var node_width = node.outerWidth();
    /* TODO: Resize the trees div (actually resize the contents left margin);
    there is a post open/close hook, where this can be implemented */
         
    var width = this.getWidth();
    
    if (node_position + node_width > width) {
      alert('its bigger: ' + node_position + node_width);
    }
    
    var treebar = jQuery(".treebar");
    
    jQuery.ajax({
      "url" : "<%= url_for :controller => 'requirements', :action => 'treestate' %>/" + node.attr("id").gsub('node_','') + "?open=true" ,
    });        
  })
  .bind("move_node.jstree", function (e, data) {
    data.rslt.o.each(function (i) {
      jQuery.ajax({
        async : false,
        type: 'POST',
        url: "<%= url_for :controller => 'requirements', :action => 'delegate_tree_drop' %>/",
        data : { 
          "id" : jQuery(this).attr("id").replace("node_",""), 
          "new_parent_id" : data.rslt.np.attr("id").replace("node_",""),
          "ancestor_id" : data.rslt.r.attr("id").replace("node_",""),
          "position" : data.rslt.p,
          "authenticity_token" : encodeURIComponent(<%= "#{form_authenticity_token.inspect}" %>)
        },
        success : function (r) {
          if(!r.status) {
            jQuery.jstree.rollback(data.rlbk);
          }
          else {
            jQuery(data.rslt.oc).attr("id", "node_" + r.id);
            if(data.rslt.cy && jQuery(data.rslt.oc).children("UL").length) {
              data.inst.refresh(data.inst._get_parent(data.rslt.oc));
            }
          }
        }
      });
    });
  })    
  .jstree({
    "core": {
      "animation" : 100,
      "strings" : {
        "loading" : "<%= t(:re_tree_loading) %>"
      }
    },
    "themes" : {
      "url": "<%= stylesheet_path "/plugin_assets/redmine_re/stylesheets/jquery.jstree/classic/style.css"  %>",
      "theme" : "classic",
      "dots" : true,
      "icons" : true
    },
    "json_data" : {
      "ajax" : {
        "url" : function (n) {
          var url = "<%= url_for :controller => 'requirements', :action => 'treestate' %>";
          var id = n.attr ? n.attr("id").gsub('node_','') : -1;
          var params = "?project_id=<%= @project.id %>&open=data";
          return url + "/" + id + params;
        }
      }		    
    },
    "types" : {
      "types" : {
        "default" : {
          /*"valid_children" : [ "default" ]*/
        },
        "re_goal" : {
          "icon" : { 
            "image" :"<%= image_path 'icons/world.png', :plugin => 'redmine_re' %>"
          }
        },
        "re_task" : {
          "icon" : { 
            "image" :"<%= image_path 'icons/report_user.png', :plugin => 'redmine_re' %>"
          }
        },
        "re_subtask" : {
          "icon" : { 
            "image" :"<%= image_path 'icons/report.png', :plugin => 'redmine_re' %>"
          }
        },
        "re_vision" : {
          "icon" : { 
            "image" :"<%= image_path 'icons/lightbulb.png', :plugin => 'redmine_re' %>"
          }
        },
        "re_attachment" : {
          "icon" : { 
            "image" :"<%= image_path 'icons/attach.png', :plugin => 'redmine_re' %>"
          }
        },          
        "re_workarea" : {
          "icon" : { 
            "image" :"<%= image_path 'icons/bricks.png', :plugin => 'redmine_re' %>"
          }
        },
        "re_user_profile" : {
          "icon" : { 
            "image" :"<%= image_path 'icons/user.png', :plugin => 'redmine_re' %>"
          }
        },
        "re_section" : {
          "icon" : { 
            "image" :"<%= image_path 'icons/text_padding_top.png', :plugin => 'redmine_re' %>"
          }
        },
        "re_requirement" : {
          "icon" : { 
            "image" :"<%= image_path 'icons/pencil.png', :plugin => 'redmine_re' %>"
          }
        },
        "re_scenario" : {
          "icon" : { 
            "image" :"<%= image_path 'icons/newspaper.png', :plugin => 'redmine_re' %>"
          }
        }        
        
      }
    },
    "dnd" : {
      "drop_finish" : function (data) {
        var drag = data.o;
        var drop = data.r;
        var id = drag.attr("id").replace('node_','');
        var name = jQuery("a:first", drag.first()).text();
        var name = jQuery.trim(name);
        
        var parent_id_field = jQuery('#parent_artifact_id');
        var parent_text_field = jQuery('#parent_autocomplete');
        
        parent_id_field.val(id);
        parent_text_field.val(name);
      },
      "drop_check" : function (data) {
        var drag = data.o;
        var drag_id = drag.attr("id");
        
        var invalid_ids = [];
        var artifact_in_editor = "node_<%= @artifact.id.to_s unless @artifact.nil? || @artifact.id.nil? %>";
        invalid_ids.push(artifact_in_editor);
        
        jQuery("#" + artifact_in_editor).find("li").each(function () {
          invalid_ids.push(this.id);
        });
        
        if (jQuery.inArray(drag_id, invalid_ids) > -1)
          return false;
        
        /*TODO: We need to make sure that this is also checked in the controller
        since we are still throwing exceptions if not*/
        
        return true;
      }
    },
    "ui" : {
      <%= '"initially_select" : [ "node_' + @artifact.id.to_s + '" ],' unless @artifact.nil? || @artifact.id.nil? %>
      "select_limit" : 1,
      "selected_parent_close" : "select_parent"
    },
    "contextmenu" : {
      "select_node" : true,
      "show_at_node" : false,
      "items" : {
        "create" : false,
        "rename" : false,
        "remove" : false,
        "ccp" : false,
        "new" : {
          "label" : "<%= t('re_create_in') %>",
          "separator_before" : false,
          "separator_after"	: false,
          "icon" : "new",
          "submenu" : {
          <% for artifact_type in @re_artifact_order	%>
            "<%= artifact_type.underscore %>" : {
              "label" : "<%= t(artifact_type.underscore) %>",
              "action" : function (node) {
                jQuery.blockUI({
                    "message" : "<p><%= t(:re_editor_for) %><br/><br/><b><%= t('re_new_' + artifact_type.underscore) %></b><br/><br/><%= t(:re_is_being_loaded) %></p>"
                });                  
                var id = node[0].id.gsub('node_','');
                var link = "<%= url_for(:controller => artifact_type.underscore, :action => 'new', :project_id => @project.id) %>";
                window.location.href = link + '?parent_artifact_id=' + id;
              },
              "icon" : "<%= artifact_type.underscore %>"
            }<%= "," unless artifact_type == @re_artifact_order.last %>
          <% end %>
          }
        },
        "relation" : {
          "label" : "<%= t('re_create_relation') %>",
          "separator_before" : false,
          "separator_after"	: true,
          "icon" : "relation",
          "submenu" : {
          <% for relation_type in @re_relation_order %>
            "<%= relation_type %>" : {
              "label" : "<%= relation_type %>",
              "action" : function (node) {
                var id = node[0].id.gsub('node_','');
                var link = "<%= url_for(:controller => artifact_type.underscore, :action => 'new', :project_id => @project.id) %>";
                alert('RELATION CREATOR COMING SOON');
              },
              "icon" : "<%= artifact_type.underscore %>"
            }<%= "," unless relation_type == @re_relation_order.last %>
          <% end %>
          }
        },
        "edit" : {
          "label" : "<%= t(:re_edit) %>",
          "icon" : "edit",
          "action" : function (node) {
            jQuery.blockUI({
                "message" : "<p><%= t(:re_editor_for) %><br/><br/><b>" + node.attr("title") + "</b><br/><br/><%= t(:re_is_being_loaded) %></p>"
            });
            var id = node[0].id.gsub('node_','');
            var link = "<%= url_for(:controller => 're_artifact_properties', :action => 'edit') %>/";
            window.location.href = link + id;
          }             
        },
        "delete" : {
          "label" : "<%= t(:re_delete) %>",
          "icon" : "delete",
          "action" : function (node) {
            /*jQuery.blockUI({
                "message" : "<p><%= t(:re_editor_for) %><br/><br/><b>" + node.attr("title") + "</b><br/><br/><%= t(:re_is_being_loaded) %></p>"
            });*/
            var id = node[0].id.gsub('node_','');
            var link = "<%= url_for(:controller => 're_artifact_properties', :action => 'delete') %>/";
            window.location.href = link + id;
          }
        }          
      }
    },
    plugins : [ "themes", "json_data", "dnd", "types" , "ui", "contextmenu" ]
  });
  
  jQuery("#tree a").live("click", function(e) {
      var parent = jQuery(this).parent();
      jQuery.blockUI({
          "message" : "<p><%= t(:re_editor_for) %><br/><br/><b>" + parent.attr("title") + "</b><br/><br/><%= t(:re_is_being_loaded) %></p>"
      }); 
      var link = "<%= url_for(:controller => 're_artifact_properties', :action => 'edit') %>/"
      var type = parent.attr("rel");
      var id = parent.attr ? parent.attr("id").gsub('node_','') : -1;
      window.location.href = link + id
  })
  jQuery(document).ready(function(){

    jQuery("#back-top").hide();
    jQuery(function () {
      jQuery(window).scroll(function () {
        if (jQuery(this).scrollTop() > 100) {
          jQuery('#back-top').fadeIn();
        } else {
          jQuery('#back-top').fadeOut();
        }
      });
      // scroll body to 0px on click
      jQuery('#back-top a').click(function () {
        jQuery('body,html').animate({
          scrollTop: 0
        }, 800);
        return false;
      });
    });
  

});
  //]]>
</script>
