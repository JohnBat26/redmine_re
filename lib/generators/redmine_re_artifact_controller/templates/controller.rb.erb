class <%= class_name %>Controller < RedmineReController
  unloadable
  def index
  
    @<%= plural_name %> = <%= class_name %>.find(:all,
                         :joins => :re_artifact_properties,
                         :conditions => {:re_artifact_properties => {:project_id => @project.id}}
    )
    render :layout => false if params[:layout] == 'false'
  end

  def new
    # redirects to edit to be more dry

    redirect_to :action => 'edit', :project_id => params[:project_id]
  end

  def edit
    @<%= class_name.underscore %> = <%= class_name %>.find_by_id(params[:id], :include => :re_artifact_properties) || <%= class_name %>.new
    @project ||= @<%= class_name.underscore %>.project
    
    # render html for tree
    @html_tree = create_tree
    
    if request.post?
      @<%= class_name.underscore %>.attributes = params[:<%= class_name.underscore %>]
      add_hidden_re_artifact_properties_attributes @<%= class_name.underscore %>

      flash[:notice] = '<%= class_name %> successfully saved' if save_ok = @<%= class_name.underscore %>.save

      redirect_to :action => 'edit', :id => @<%= class_name.underscore %>.id and return if save_ok
    end
  end

  def delete
  # deletes and updates the flash with either success, id not found error or deletion error
    @<%= class_name.underscore %> = <%= class_name %>.find_by_id(params[:id], :include => :re_artifact_properties)
    if !@<%= class_name.underscore %>
      flash[:error] = 'Could not find a <%= class_name %> with this ' + params[:id] + ' to delete'
    else
      name = @<%= class_name.underscore %>.name
      if <%= class_name %>.destroy(@<%= class_name.underscore %>.id)
        flash[:notice] = 'The <%= class_name %> "' + name + '" has been deleted'
      else
        flash[:error] = 'The <%= class_name %> "' + name + '" could not be deleted'
      end
    end
    if request.xhr?
      redirect_to :action => 'index', :project_id => @project.id, :layout => 'false'
    else
      redirect_to :action => 'index', :project_id => @project.id
    end
  end

<% actions.each do |action| -%>

  def <%= action %>
  end
<% end -%>
end